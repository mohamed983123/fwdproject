version: 2.1
commands:
    install_awscli:
      description: Install AWS CLI V2
      steps:
        - run:
           name: Install AWS CLI v2
           command: |
             sudo apt update && sudo apt install -yy less
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install
    install_ansible:
      description: Install Ansible v2
      steps:
        - run:
           name: Install Ansible v2
           command: |
             sudo apt update 
             sudo apt install software-properties-common
             sudo add-apt-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        workflowID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}    
      
          
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
              aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>







            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build 
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build 
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps


  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical 
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical 
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_IP >>.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment     

  configure-infrastructure:
     docker:
       - image: cimg/base:stable
        
     steps:
       - checkout
       - install_ansible
       - add_ssh_keys:
           fingerprints: ["c8:24:5d:1f:20:25:45:f6:f9:d0:42:01:92:83:52:00"]
          
       - attach_workspace:
           at: ~/

       - run:
           name: Install dependencies
           command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yaml
          
       - destroy-environment:
          
















 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]